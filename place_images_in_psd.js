(function(){    // Where are my images?    var baseFolder = '//users/myuser/pathtomyimages/';        // Watch this folder    var hotFolder = (new Folder(baseFolder+'/in/'));        // PSD to use, please note expects a layer called 'Background'    var psdTemplate = baseFolder+'/psd/hero.psd';        var exportFolder = baseFolder+'/out';    // Keep track of the current file so we can delete it    var currentFileRef = '';        // Set up array for image files    var filesArray = [];    // Height of scaled image    var imageHeight = 0;    // Size of output PSD    var templateInPX = 2880;    function checkForFiles() {        filesArray = [];        var aChildren = hotFolder.getFiles();        // No files processing        if (aChildren.length === 0) {            $.writeln ( "No files to process");        }         else {            var child = '';            // Process files            for (var i = 0; i < aChildren.length; i++) {                child = aChildren[i];                if(child.name.indexOf('.jpg') === -1 && child.name.indexOf('.jpeg') === -1) {                    $.writeln ( "Wrong file type");                }                // We have some files to process                else {                    filesArray.push(child);                }            }        }        if(filesArray.length > 0) {            processFiles();        }    }    function processFiles() {        $.writeln ( "Process files: files array is + : " + filesArray);        var currentImage = '';        for(var i = 0; i < filesArray.length; i++) {            currentImage = filesArray[i];            processImage(currentImage, i);        }    }    function processImage(image, count) {        $.writeln ( "Process Image");        openImage(image);        placeInPsd(count);    }    function openImage(image) {     $.writeln ( "Open image");                var fileRef = new File(image);        currentFileRef = fileRef;        app.open(fileRef);        var doc =  activeDocument;        var imageWidth = doc.width;        var imageHeight = doc.height;        var imageRatio = imageWidth/imageHeight;        var imageHeight = templateInPX/imageRatio;        doc.resizeImage(UnitValue(templateInPX,"px"),UnitValue(imageHeight,"px"),null,ResampleMethod.BICUBIC);        doc.selection.selectAll();        doc.selection.copy();        app.activeDocument.close(SaveOptions.DONOTSAVECHANGES);     }    function placeInPsd(count) {                $.writeln ( "Place in psd");        var fileRef =  new File(psdTemplate);        currentFileRef = fileRef;        app.open(fileRef);        var doc = app.activeDocument;        doc.activeLayer = doc.artLayers.getByName("Background");        doc.paste();        exportPng(count);     }     function exportPng(count) {                var doc = app.activeDocument;        // Document name        var docName               = doc.name;         // Document path        var docPath               = doc.path;        // Gets rid of the extension        var docName               = docName.substring( 0, docName.indexOf('.') );        // Construct the Auto Save folder path        var savePath         = exportFolder;        // If Auto Save folder doesn't exist, make one.        var saveFolder        = new Folder( exportFolder );        if( !saveFolder.exists ) { saveFolder.create(); }        // Options for saving psd        var psd_Opt               = new PhotoshopSaveOptions();        psd_Opt.layers            = true; // Preserve layers.        psd_Opt.embedColorProfile = true; // Preserve color profile.        psd_Opt.annotations       = true; // Preserve annonations.        psd_Opt.alphaChannels     = true; // Preserve alpha channels.        psd_Opt.spotColors        = true; // Preserve spot colors.        // Save active document in the Auto Save folder        doc.saveAs( File( savePath + '/' + count + '.psd' ), psd_Opt, true );        // Close the current document without saving        app.activeDocument.close(SaveOptions.DONOTSAVECHANGES);             }    checkForFiles();}());